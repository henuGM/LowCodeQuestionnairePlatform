{"version":3,"file":"static/js/statPage.7ef10163.chunk.js","mappings":"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","sources":["webpack://wenjuan/./src/pages/question/Stat/StatHeader.module.scss?a5ff","pages/question/Stat/StatHeader.tsx","webpack://wenjuan/./src/pages/question/Stat/ComponentList.module.scss?3dd2","pages/question/Stat/ComponentList.tsx","pages/question/Stat/PageStat.tsx","services/stat.ts","pages/question/Stat/ChartStat.tsx","webpack://wenjuan/./src/pages/question/Stat/index.module.scss?6995","pages/question/Stat/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"header-wrapper\":\"StatHeader_header-wrapper__b8JLM\",\"header\":\"StatHeader_header__8MEa7\",\"left\":\"StatHeader_left__OkrfJ\",\"h1\":\"StatHeader_h1__qdgx0\",\"right\":\"StatHeader_right__5Y-Xw\",\"main\":\"StatHeader_main__tcJ3D\"};","import React, { FC, useRef, useMemo } from 'react'\nimport { Space, Button, Typography, Input, Tooltip, message, Popover } from 'antd'\nimport type { InputRef } from 'antd'\nimport { LeftOutlined, CopyOutlined, QrcodeOutlined } from '@ant-design/icons'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport QRCode from 'qrcode.react'\nimport useGetPageInfo from '../../../hooks/useGetPageInfo'\nimport styles from './StatHeader.module.scss'\n\nconst { Title } = Typography\n\nconst StatHeader: FC = () => {\n  const nav = useNavigate()\n  const { id } = useParams()\n\n  const { title, isPublished } = useGetPageInfo()\n\n  // 拷贝链接\n  const urlInputRef = useRef<InputRef>(null)\n  function copy() {\n    const elem = urlInputRef.current\n    if (elem == null) return\n    elem.select() // 选中 input 的内容\n    document.execCommand('copy') // 拷贝选中内容 （富文本编辑器的操作）\n    message.success('拷贝成功')\n  }\n\n  // function genLinkAndQRCodeElem() {\n  //   if (!isPublished) return null\n\n  //   // 拼接 url ，需要参考 C 端的规则\n  //   const url = `http://localhost:3000/question/${id}`\n\n  //   // 定义二维码组件\n  //   const QRCodeElem = (\n  //     <div style={{ textAlign: 'center' }}>\n  //       <QRCode value={url} size={150} />\n  //     </div>\n  //   )\n\n  //   return (\n  //     <Space>\n  //       <Input value={url} style={{ width: '300px' }} ref={urlInputRef} />\n  //       <Tooltip title=\"拷贝链接\">\n  //         <Button icon={<CopyOutlined />} onClick={copy}></Button>\n  //       </Tooltip>\n  //       <Popover content={QRCodeElem}>\n  //         <Button icon={<QrcodeOutlined />}></Button>\n  //       </Popover>\n  //     </Space>\n  //   )\n  // }\n\n  // 使用 useMemo 1. 依赖项是否经常变化; 2. 缓存的元素是否创建成本较高\n  const LinkAndQRCodeElem = useMemo(() => {\n    if (!isPublished) return null\n\n    // 拼接 url ，需要参考 C 端的规则\n    const url = `http://localhost:3000/question/${id}`\n\n    // 定义二维码组件\n    const QRCodeElem = (\n      <div style={{ textAlign: 'center' }}>\n        <QRCode value={url} size={150} />\n      </div>\n    )\n\n    return (\n      <Space style={{marginTop:\"3px\"}}>\n        <Input value={url} style={{ width: '300px' }} ref={urlInputRef} />\n        <Tooltip title=\"拷贝链接\">\n          <Button icon={<CopyOutlined />} onClick={copy}></Button>\n        </Tooltip>\n        <Popover content={QRCodeElem}>\n          <Button icon={<QrcodeOutlined />}></Button>\n        </Popover>\n      </Space>\n    )\n  }, [id, isPublished])\n\n  return (\n    <div className={styles['header-wrapper']}>\n      <div className={styles.header}>\n        <div className={styles.left}>\n          <Space>\n            <Button type=\"link\" icon={<LeftOutlined />} onClick={() => nav(-1)}>\n              返回\n            </Button>\n            <Title className={styles.h1}>{title}</Title>\n          </Space>\n        </div>\n        <div className={styles.main}>{LinkAndQRCodeElem}</div>\n        <div className={styles.right}>\n          <Button style={{marginTop:\"3px\"}} type=\"primary\" onClick={() => nav(`/question/edit/${id}`)}>\n            编辑问卷\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default StatHeader\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ComponentList_container__OMWM1\",\"component-wrapper\":\"ComponentList_component-wrapper__oYOds\",\"selected\":\"ComponentList_selected__6ci7t\",\"component\":\"ComponentList_component__5JvFj\"};","import React, { FC } from 'react'\nimport classNames from 'classnames'\nimport useGetComponentInfo from '../../../hooks/useGetComponentInfo'\nimport { getComponentConfByType } from '../../../components/QuestionComponents/index'\nimport styles from './ComponentList.module.scss'\n\ntype PropsType = {\n  selectedComponentId: string\n  setSelectedComponentId: (id: string) => void\n  setSelectedComponentType: (type: string) => void\n}\n\nconst ComponentList: FC<PropsType> = props => {\n  const { selectedComponentId, setSelectedComponentId, setSelectedComponentType } = props\n  const { componentList } = useGetComponentInfo()\n\n  return (\n    <div className={styles.container}>\n      {componentList\n        .filter(c => !c.isHidden) // 过滤隐藏的组件\n        .map(c => {\n          const { fe_id, props, type } = c\n\n          const componentConf = getComponentConfByType(type)\n          if (componentConf == null) return null\n\n          const { Component } = componentConf\n\n          // 拼接 class name\n          const wrapperDefaultClassName = styles['component-wrapper']\n          const selectedClassName = styles.selected\n          const wrapperClassName = classNames({\n            [wrapperDefaultClassName]: true,\n            [selectedClassName]: fe_id === selectedComponentId, // 是否选中\n          })\n\n          return (\n            <div\n              className={wrapperClassName}\n              key={fe_id}\n              onClick={() => {\n                setSelectedComponentId(fe_id)\n                setSelectedComponentType(type)\n              }}\n            >\n              <div className={styles.component}>\n                <Component {...props}></Component>\n              </div>\n            </div>\n          )\n        })}\n    </div>\n  )\n}\n\nexport default ComponentList\n","import React, { FC, useState } from 'react'\nimport { Typography, Spin, Table, Pagination } from 'antd'\nimport { useRequest } from 'ahooks'\nimport { useParams } from 'react-router-dom'\nimport { getQuestionStatListService } from '../../../services/stat'\nimport useGetComponentInfo from '../../../hooks/useGetComponentInfo'\nimport { STAT_PAGE_SIZE } from '../../../constant'\n\nconst { Title } = Typography\n\ntype PropsType = {\n  selectedComponentId: string\n  setSelectedComponentId: (id: string) => void\n  setSelectedComponentType: (type: string) => void\n}\n\nconst PageStat: FC<PropsType> = (props: PropsType) => {\n  const { selectedComponentId, setSelectedComponentId, setSelectedComponentType } = props\n\n  const { id = '' } = useParams()\n\n  const [page, setPage] = useState(1)\n  const [pageSize, setPageSize] = useState(STAT_PAGE_SIZE)\n  const [total, setTotal] = useState(0)\n  const [list, setList] = useState([])\n  const { loading } = useRequest(\n    async () => {\n      const res = await getQuestionStatListService(id, { page, pageSize })\n      return res\n    },\n    {\n      refreshDeps: [id, page, pageSize],\n      onSuccess(res) {\n        const { total, list = [] } = res\n        setTotal(total)\n        setList(list)\n      },\n    }\n  )\n\n  const { componentList } = useGetComponentInfo()\n  const columns = componentList.map(c => {\n    const { fe_id, title, props = {}, type } = c\n\n    const colTitle = props!.title || title\n\n    return {\n      // title: colTitle,\n      title: (\n        <div\n          style={{ cursor: 'pointer' }}\n          onClick={() => {\n            setSelectedComponentId(fe_id)\n            setSelectedComponentType(type)\n          }}\n        >\n          <span style={{ color: fe_id === selectedComponentId ? '#1890ff' : 'inherit' }}>\n            {colTitle}\n          </span>\n        </div>\n      ),\n      dataIndex: fe_id,\n    }\n  })\n\n  const dataSource = list.map((i: any) => ({ ...i, key: i._id }))\n  const TableElem = (\n    <>\n      <Table columns={columns} dataSource={dataSource} pagination={false}></Table>\n      <div style={{ textAlign: 'center', marginTop: '18px' }}>\n        <Pagination\n          total={total}\n          pageSize={pageSize}\n          current={page}\n          onChange={page => setPage(page)}\n          onShowSizeChange={(page, pageSize) => {\n            setPage(page)\n            setPageSize(pageSize)\n          }}\n        />\n      </div>\n    </>\n  )\n\n  return (\n    <div>\n      <Title level={3}>答卷数量: {!loading && total}</Title>\n      {loading && (\n        <div style={{ textAlign: 'center' }}>\n          <Spin />\n        </div>\n      )}\n      {!loading && TableElem}\n    </div>\n  )\n}\n\nexport default PageStat\n","import axios, { ResDataType } from './ajax'\n\n// 获取问卷的统计列表\nexport async function getQuestionStatListService(\n  questionId: string,\n  opt: { page: number; pageSize: number }\n): Promise<ResDataType> {\n  const url = `/api/stat/${questionId}`\n  const data = (await axios.get(url, { params: opt })) as ResDataType\n  return data\n}\n\n// 获取组件统计数据汇总\nexport async function getComponentStatService(\n  questionId: string,\n  componentId: string\n): Promise<ResDataType> {\n  const url = `/api/stat/${questionId}/${componentId}`\n  const data = (await axios.get(url)) as ResDataType\n  return data\n}\n","import React, { FC, useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Typography } from 'antd'\nimport { useRequest } from 'ahooks'\nimport { getComponentStatService } from '../../../services/stat'\nimport { getComponentConfByType } from '../../../components/QuestionComponents'\n\nconst { Title } = Typography\n\ntype PropsType = {\n  selectedComponentId: string\n  selectedComponentType: string\n}\n\nconst ChartStat: FC<PropsType> = (props: PropsType) => {\n  const { selectedComponentId, selectedComponentType } = props\n  const { id = '' } = useParams()\n\n  const [stat, setStat] = useState([])\n  const { run } = useRequest(\n    async (questionId, componentId) => await getComponentStatService(questionId, componentId),\n    {\n      manual: true,\n      onSuccess(res) {\n        setStat(res.stat)\n      },\n    }\n  )\n\n  useEffect(() => {\n    if (selectedComponentId) run(id, selectedComponentId)\n  }, [id, selectedComponentId])\n\n  function genStatElem() {\n    if (!selectedComponentId) return <div>未选中组件</div>\n\n    const { StatComponent } = getComponentConfByType(selectedComponentType) || {}\n    if (StatComponent == null) return <div>该组件无统计图表</div>\n\n    return <StatComponent stat={stat} />\n  }\n\n  return (\n    <>\n      <Title level={3}>图表统计</Title>\n      <div>{genStatElem()}</div>\n    </>\n  )\n}\n\nexport default ChartStat\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Stat_container__bkqFv\",\"content-wrapper\":\"Stat_content-wrapper__x5fxk\",\"content\":\"Stat_content__ziDc1\",\"left\":\"Stat_left__y5dHw\",\"main\":\"Stat_main__D4R-H\",\"right\":\"Stat_right__50SCY\"};","import React, { FC, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Spin, Result, Button } from 'antd'\nimport { useTitle } from 'ahooks'\nimport useLoadQuestionData from '../../../hooks/useLoadQuestionData'\nimport useGetPageInfo from '../../../hooks/useGetPageInfo'\nimport StatHeader from './StatHeader'\nimport ComponentList from './ComponentList'\nimport PageStat from './PageStat'\nimport ChartStat from './ChartStat'\nimport styles from './index.module.scss'\n\nconst Stat: FC = () => {\n  const nav = useNavigate()\n  const { loading } = useLoadQuestionData()\n  const { title, isPublished } = useGetPageInfo()\n\n  // 状态提升 selectedId type\n  const [selectedComponentId, setSelectedComponentId] = useState('')\n  const [selectedComponentType, setSelectedComponentType] = useState('')\n\n  // 修改标题\n  useTitle(`问卷统计 - ${title}`)\n\n  // loading 效果\n  const LoadingELem = (\n    <div style={{ textAlign: 'center', marginTop: '60px' }}>\n      <Spin />\n    </div>\n  )\n\n  // Content Elem\n  function genContentElem() {\n    if (typeof isPublished === 'boolean' && !isPublished) {\n      return (\n        <div style={{ flex: '1' }}>\n          <Result\n            status=\"warning\"\n            title=\"该页面尚未发布\"\n            extra={\n              <Button type=\"primary\" onClick={() => nav(-1)}>\n                返回\n              </Button>\n            }\n          ></Result>\n        </div>\n      )\n    }\n\n    return (\n      <>\n        <div className={styles.left}>\n          <ComponentList\n            selectedComponentId={selectedComponentId}\n            setSelectedComponentId={setSelectedComponentId}\n            setSelectedComponentType={setSelectedComponentType}\n          />\n        </div>\n        <div className={styles.main}>\n          <PageStat\n            selectedComponentId={selectedComponentId}\n            setSelectedComponentId={setSelectedComponentId}\n            setSelectedComponentType={setSelectedComponentType}\n          />\n        </div>\n        <div className={styles.right}>\n          <ChartStat\n            selectedComponentId={selectedComponentId}\n            selectedComponentType={selectedComponentType}\n          />\n        </div>\n      </>\n    )\n  }\n\n  return (\n    <div className={styles.container}>\n      <StatHeader />\n      <div className={styles['content-wrapper']}>\n        {loading && LoadingELem}\n        {!loading && <div className={styles.content}>{genContentElem()}</div>}\n      </div>\n    </div>\n  )\n}\n\nexport default Stat\n"],"names":["Title","Typography","StatHeader","nav","useNavigate","id","useParams","title","isPublished","useGetPageInfo","urlInputRef","useRef","copy","elem","current","select","document","execCommand","message","success","LinkAndQRCodeElem","useMemo","url","concat","QRCodeElem","_jsx","style","textAlign","children","QRCode","value","size","_jsxs","Space","marginTop","Input","width","ref","Tooltip","Button","icon","CopyOutlined","onClick","Popover","content","QrcodeOutlined","className","styles","type","LeftOutlined","props","selectedComponentId","setSelectedComponentId","setSelectedComponentType","componentList","useGetComponentInfo","filter","c","isHidden","map","fe_id","componentConf","getComponentConfByType","Component","wrapperDefaultClassName","selectedClassName","wrapperClassName","classNames","page","setPage","useState","pageSize","setPageSize","STAT_PAGE_SIZE","total","setTotal","list","setList","loading","useRequest","async","questionId","opt","axios","get","params","getQuestionStatListService","refreshDeps","onSuccess","res","columns","colTitle","cursor","color","dataIndex","dataSource","i","key","_id","TableElem","_Fragment","Table","pagination","Pagination","onChange","onShowSizeChange","level","Spin","selectedComponentType","stat","setStat","run","componentId","getComponentStatService","manual","useEffect","StatComponent","genStatElem","Stat","useLoadQuestionData","useTitle","LoadingELem","ComponentList","PageStat","ChartStat","flex","Result","status","extra"],"sourceRoot":""}